go to https://github.com/scm-ninja/starter-web

Click Fork
Anticipatorx/ starter-web                                   ===> Check id should reflect your own id now
forked from scm-ninja/starter-web                           ===> origin repository

Clone the repository to local directory


BASIC WORKFLOW
--------------
git status
git add .
git commit -m {"message_here"}
git pull origin main                                        ===> always pull before pushing to be sure your repository is upto date
git push origin main

git restore --staged {filename}                             ===> new way of unstaging
git restore {filename}                                      ===> new way of discharge changes in working directory
--------------

git commit -am "message_here"                               ===> add + -m (works only if git is tracking the files)
git ls-files                                                ===> list of all files that git is tracking in the repository

git reset HEAD {filename_here}                              ===> unstage files (added) back to the working directory
git restore --staged {filename_here}                        ===> new way of unstaging

git checkout -- {filename_here}                             ===> discharge changes in working directory
git restore {filename_here}                                 ===> new way of discharge changes in working directory

RENAMING files
--------------

git mv {filename_here} {new_filename_here}                  ===> rename filename
mv {filename_here} {new_filename_here}                      ===> deleted file, added new file with same content

git mv {filename_here} {new_filename_here}                  ===> rename file
git mv {new_filename_here} {filename_here}                  ===> revert back (as if did not do anything)
git add -A

git mv {starts.txt} {'Adding git to an existing project'/}  ===> moving file to other folder
cd {'Adding git to an existing project'/}
mv starts.txt ..
git add -A

RENAME A FILE IN THE WINDOWS EXPLORER
git add start.txt
git add -u

DELETING files
--------------
code doomed.txt         ===> create text file
ls
git status
rm doomed.txt           ===> delete text file (untracked)
ls
git status

git rm newfile.txt                  ===> delete file (tracked)

git rm {hipster.txt}                ===> staged deletion
git reset HEAD {hipster.txt}        ===> unstage the deletion
git restore --staged {hipster.txt}  ===> new way of unstaging
git restore {hipster.txt}           ===> restore the file to the repository

rm start.txt
git status
git add -A
git commit

rm -rf {folder_name}
git status
git add -A
git status
git commit -m {"deleting {folder_name"} and all children}

HISTORY
--------------
git help log
git log
<Press 'q' to quit>
git log --abbrev-commit                                 ===>  show only a partial prefix
git log --oneline --graph --decorate                    ===> --oneline (compressed the entries into one line)
                                                        ===> ASCII graph
                                                        ===> add labels to annotate the commits
git log {c782b0c}...{26dcf35}                           ===> shows only the commits in the range
git log --since={"3 days ago"}                          ===> date based searching
git log -- {filename}                                   ===> returns the commits that involve the specific file
git log --follow -- {filename/path}                     ===> commit history of the specific file
git show {eab0d65d045305a5b8d6e5492135043a45d0123e}     ===> 

ALIAS
--------------
git config --global alias.{name_of_command} {"log --all --graph --decorate --oneline"}
git hist
code ~/.gitconfig

IGNORING UNWANTED FILES/ folder
--------------
code .gitignore
    *FORMAT:
        Specific File: {MyFile.txt}
        File Pattern: {*.ext}
        Folder: {my-folder/}

P4MERGE WINDOWS INSTALLATION
--------------
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global mergetool.prompt false
git config --global diff.tool p4merge
git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global difftool.prompt false
git config --global --list
git config --global -e

git diff                                ===> Comparing Working Directory and the Staging Area
git difftool
git diff HEAD                           ===> Comparing Working Directory and Git Repository (Last Commit)
git difftool HEAD
git diff --staged HEAD                  ===> Comparing between the Staging Area and the Git Repository (Last Commit)
git difftool --staged HEAD
git diff -- README.md                   ===> Limiting Comparsons to one File (or path)
git difftool -- README.md
git log --oneline                       
git diff 4beb7f0 HEAD                   ===> Comparing Between Commits
git difftool 4beb7f0 HEAD
git diff HEAD HEAD^                     ===> HEAD vs 1 commit before HEAD
git difftool HEAD HEAD^                 
git diff master origin/master           ===> Comparing Between Local and Remote Master Branches
git difftool master origin/master
